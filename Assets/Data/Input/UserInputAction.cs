//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.14.0
//     from Assets/Data/Input/UserInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

/// <summary>
/// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/Data/Input/UserInputAction.inputactions".
/// </summary>
/// <remarks>
/// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
/// </remarks>
/// <example>
/// <code>
/// using namespace UnityEngine;
/// using UnityEngine.InputSystem;
///
/// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
/// public class Example : MonoBehaviour, MyActions.IPlayerActions
/// {
///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
///
///     void Awake()
///     {
///         m_Actions = new MyActions_Actions();              // Create asset object.
///         m_Player = m_Actions.Player;                      // Extract action map object.
///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
///     }
///
///     void OnDestroy()
///     {
///         m_Actions.Dispose();                              // Destroy asset object.
///     }
///
///     void OnEnable()
///     {
///         m_Player.Enable();                                // Enable all actions within map.
///     }
///
///     void OnDisable()
///     {
///         m_Player.Disable();                               // Disable all actions within map.
///     }
///
///     #region Interface implementation of MyActions.IPlayerActions
///
///     // Invoked when "Move" action is either started, performed or canceled.
///     public void OnMove(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
///     }
///
///     // Invoked when "Attack" action is either started, performed or canceled.
///     public void OnAttack(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
///     }
///
///     #endregion
/// }
/// </code>
/// </example>
public partial class @UserInputAction: IInputActionCollection2, IDisposable
{
    /// <summary>
    /// Provides access to the underlying asset instance.
    /// </summary>
    public InputActionAsset asset { get; }

    /// <summary>
    /// Constructs a new instance.
    /// </summary>
    public @UserInputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""UserInputAction"",
    ""maps"": [
        {
            ""name"": ""SelectUnit"",
            ""id"": ""b1eeaf99-e3fc-4f30-9ad3-2fb5a0d0b88c"",
            ""actions"": [
                {
                    ""name"": ""EnemySelectionMove"",
                    ""type"": ""Button"",
                    ""id"": ""85574eea-c6d5-4616-af9c-2a4a44cceffc"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PlayerSelectionMove"",
                    ""type"": ""Button"",
                    ""id"": ""9edaca14-fdc2-4600-98b3-b8fe49408350"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Touch"",
                    ""type"": ""Button"",
                    ""id"": ""fb7d950c-ac56-4e99-91dc-3d6a5bf2a0da"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SelectionConfirm"",
                    ""type"": ""Button"",
                    ""id"": ""b031a05d-d271-4db8-8cf4-9bcd4b8793bf"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""4411170b-700d-43b0-a7d2-29563847632c"",
                    ""path"": ""1DAxis"",
                    ""interactions"": ""Press"",
                    ""processors"": ""Clamp(min=-1,max=1),Invert"",
                    ""groups"": """",
                    ""action"": ""EnemySelectionMove"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Positive"",
                    ""id"": ""6a0695e9-d578-4483-8a6b-fe690b4b6b47"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";PC"",
                    ""action"": ""EnemySelectionMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Positive"",
                    ""id"": ""0fe4193a-fb5a-429e-a116-ff4a17014670"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";PC"",
                    ""action"": ""EnemySelectionMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Negative"",
                    ""id"": ""1cc86ba4-741d-4d89-89cd-f6e7a6192e78"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";PC"",
                    ""action"": ""EnemySelectionMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Negative"",
                    ""id"": ""3e7680d4-9e88-4f85-97c6-39e604fd766b"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";PC"",
                    ""action"": ""EnemySelectionMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""54835484-af28-45c6-a792-508a205af995"",
                    ""path"": ""1DAxis"",
                    ""interactions"": ""Press"",
                    ""processors"": ""Clamp(min=-1,max=1)"",
                    ""groups"": """",
                    ""action"": ""PlayerSelectionMove"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Positive"",
                    ""id"": ""a97a0bb5-a57f-4d89-954f-7815f14f8c56"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";PC"",
                    ""action"": ""PlayerSelectionMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Positive"",
                    ""id"": ""6da9531d-a20e-4dbf-a7ba-a94abd741c92"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";PC"",
                    ""action"": ""PlayerSelectionMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Negative"",
                    ""id"": ""0e67d116-97b6-4aad-a7cc-ad4d0fb93546"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";PC"",
                    ""action"": ""PlayerSelectionMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Negative"",
                    ""id"": ""11f53f30-7bdb-4c0a-be77-366ae5ca32e5"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";PC"",
                    ""action"": ""PlayerSelectionMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""2da518e1-33f0-46f9-8484-b7ba0491be35"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";PC"",
                    ""action"": ""SelectionConfirm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3b33a087-31b2-46e6-854b-a41895a9c538"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";PC"",
                    ""action"": ""SelectionConfirm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1a7d326e-2760-475a-b7b6-d5daedeec835"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";PC"",
                    ""action"": ""Touch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""SelectAction"",
            ""id"": ""1c9601b1-d19e-4ca3-ac0a-79a7438ec68d"",
            ""actions"": [
                {
                    ""name"": ""BaseAttack"",
                    ""type"": ""Button"",
                    ""id"": ""1ceb7585-c567-4edf-b837-ae22ddcfa408"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SkillSelect"",
                    ""type"": ""Button"",
                    ""id"": ""3f26849e-77c7-4028-892e-17915b0bfaf3"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UseItem"",
                    ""type"": ""Button"",
                    ""id"": ""74bbddcb-adb3-4116-98d1-70ad02f7b57d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9e723149-4cd5-488c-ae82-296d0d2179f5"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BaseAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""163d82d0-263f-4830-8b31-7b33bfab0205"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SkillSelect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7bf569b0-1f81-41a5-bf7f-99434f786755"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UseItem"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""QTE"",
            ""id"": ""ade6d4c6-fe8a-4e62-b039-7773a71c1fd1"",
            ""actions"": [
                {
                    ""name"": ""ButtonA"",
                    ""type"": ""Button"",
                    ""id"": ""abb0381d-5011-450f-b9d9-4374d2aded85"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ad6dd39b-f63d-4387-a451-883d1789f911"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ButtonA"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""PC"",
            ""bindingGroup"": ""PC"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // SelectUnit
        m_SelectUnit = asset.FindActionMap("SelectUnit", throwIfNotFound: true);
        m_SelectUnit_EnemySelectionMove = m_SelectUnit.FindAction("EnemySelectionMove", throwIfNotFound: true);
        m_SelectUnit_PlayerSelectionMove = m_SelectUnit.FindAction("PlayerSelectionMove", throwIfNotFound: true);
        m_SelectUnit_Touch = m_SelectUnit.FindAction("Touch", throwIfNotFound: true);
        m_SelectUnit_SelectionConfirm = m_SelectUnit.FindAction("SelectionConfirm", throwIfNotFound: true);
        // SelectAction
        m_SelectAction = asset.FindActionMap("SelectAction", throwIfNotFound: true);
        m_SelectAction_BaseAttack = m_SelectAction.FindAction("BaseAttack", throwIfNotFound: true);
        m_SelectAction_SkillSelect = m_SelectAction.FindAction("SkillSelect", throwIfNotFound: true);
        m_SelectAction_UseItem = m_SelectAction.FindAction("UseItem", throwIfNotFound: true);
        // QTE
        m_QTE = asset.FindActionMap("QTE", throwIfNotFound: true);
        m_QTE_ButtonA = m_QTE.FindAction("ButtonA", throwIfNotFound: true);
    }

    ~@UserInputAction()
    {
        UnityEngine.Debug.Assert(!m_SelectUnit.enabled, "This will cause a leak and performance issues, UserInputAction.SelectUnit.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_SelectAction.enabled, "This will cause a leak and performance issues, UserInputAction.SelectAction.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_QTE.enabled, "This will cause a leak and performance issues, UserInputAction.QTE.Disable() has not been called.");
    }

    /// <summary>
    /// Destroys this asset and all associated <see cref="InputAction"/> instances.
    /// </summary>
    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
    public void Enable()
    {
        asset.Enable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
    public void Disable()
    {
        asset.Disable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
    public IEnumerable<InputBinding> bindings => asset.bindings;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // SelectUnit
    private readonly InputActionMap m_SelectUnit;
    private List<ISelectUnitActions> m_SelectUnitActionsCallbackInterfaces = new List<ISelectUnitActions>();
    private readonly InputAction m_SelectUnit_EnemySelectionMove;
    private readonly InputAction m_SelectUnit_PlayerSelectionMove;
    private readonly InputAction m_SelectUnit_Touch;
    private readonly InputAction m_SelectUnit_SelectionConfirm;
    /// <summary>
    /// Provides access to input actions defined in input action map "SelectUnit".
    /// </summary>
    public struct SelectUnitActions
    {
        private @UserInputAction m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public SelectUnitActions(@UserInputAction wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "SelectUnit/EnemySelectionMove".
        /// </summary>
        public InputAction @EnemySelectionMove => m_Wrapper.m_SelectUnit_EnemySelectionMove;
        /// <summary>
        /// Provides access to the underlying input action "SelectUnit/PlayerSelectionMove".
        /// </summary>
        public InputAction @PlayerSelectionMove => m_Wrapper.m_SelectUnit_PlayerSelectionMove;
        /// <summary>
        /// Provides access to the underlying input action "SelectUnit/Touch".
        /// </summary>
        public InputAction @Touch => m_Wrapper.m_SelectUnit_Touch;
        /// <summary>
        /// Provides access to the underlying input action "SelectUnit/SelectionConfirm".
        /// </summary>
        public InputAction @SelectionConfirm => m_Wrapper.m_SelectUnit_SelectionConfirm;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_SelectUnit; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="SelectUnitActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(SelectUnitActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="SelectUnitActions" />
        public void AddCallbacks(ISelectUnitActions instance)
        {
            if (instance == null || m_Wrapper.m_SelectUnitActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SelectUnitActionsCallbackInterfaces.Add(instance);
            @EnemySelectionMove.started += instance.OnEnemySelectionMove;
            @EnemySelectionMove.performed += instance.OnEnemySelectionMove;
            @EnemySelectionMove.canceled += instance.OnEnemySelectionMove;
            @PlayerSelectionMove.started += instance.OnPlayerSelectionMove;
            @PlayerSelectionMove.performed += instance.OnPlayerSelectionMove;
            @PlayerSelectionMove.canceled += instance.OnPlayerSelectionMove;
            @Touch.started += instance.OnTouch;
            @Touch.performed += instance.OnTouch;
            @Touch.canceled += instance.OnTouch;
            @SelectionConfirm.started += instance.OnSelectionConfirm;
            @SelectionConfirm.performed += instance.OnSelectionConfirm;
            @SelectionConfirm.canceled += instance.OnSelectionConfirm;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="SelectUnitActions" />
        private void UnregisterCallbacks(ISelectUnitActions instance)
        {
            @EnemySelectionMove.started -= instance.OnEnemySelectionMove;
            @EnemySelectionMove.performed -= instance.OnEnemySelectionMove;
            @EnemySelectionMove.canceled -= instance.OnEnemySelectionMove;
            @PlayerSelectionMove.started -= instance.OnPlayerSelectionMove;
            @PlayerSelectionMove.performed -= instance.OnPlayerSelectionMove;
            @PlayerSelectionMove.canceled -= instance.OnPlayerSelectionMove;
            @Touch.started -= instance.OnTouch;
            @Touch.performed -= instance.OnTouch;
            @Touch.canceled -= instance.OnTouch;
            @SelectionConfirm.started -= instance.OnSelectionConfirm;
            @SelectionConfirm.performed -= instance.OnSelectionConfirm;
            @SelectionConfirm.canceled -= instance.OnSelectionConfirm;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="SelectUnitActions.UnregisterCallbacks(ISelectUnitActions)" />.
        /// </summary>
        /// <seealso cref="SelectUnitActions.UnregisterCallbacks(ISelectUnitActions)" />
        public void RemoveCallbacks(ISelectUnitActions instance)
        {
            if (m_Wrapper.m_SelectUnitActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="SelectUnitActions.AddCallbacks(ISelectUnitActions)" />
        /// <seealso cref="SelectUnitActions.RemoveCallbacks(ISelectUnitActions)" />
        /// <seealso cref="SelectUnitActions.UnregisterCallbacks(ISelectUnitActions)" />
        public void SetCallbacks(ISelectUnitActions instance)
        {
            foreach (var item in m_Wrapper.m_SelectUnitActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SelectUnitActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="SelectUnitActions" /> instance referencing this action map.
    /// </summary>
    public SelectUnitActions @SelectUnit => new SelectUnitActions(this);

    // SelectAction
    private readonly InputActionMap m_SelectAction;
    private List<ISelectActionActions> m_SelectActionActionsCallbackInterfaces = new List<ISelectActionActions>();
    private readonly InputAction m_SelectAction_BaseAttack;
    private readonly InputAction m_SelectAction_SkillSelect;
    private readonly InputAction m_SelectAction_UseItem;
    /// <summary>
    /// Provides access to input actions defined in input action map "SelectAction".
    /// </summary>
    public struct SelectActionActions
    {
        private @UserInputAction m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public SelectActionActions(@UserInputAction wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "SelectAction/BaseAttack".
        /// </summary>
        public InputAction @BaseAttack => m_Wrapper.m_SelectAction_BaseAttack;
        /// <summary>
        /// Provides access to the underlying input action "SelectAction/SkillSelect".
        /// </summary>
        public InputAction @SkillSelect => m_Wrapper.m_SelectAction_SkillSelect;
        /// <summary>
        /// Provides access to the underlying input action "SelectAction/UseItem".
        /// </summary>
        public InputAction @UseItem => m_Wrapper.m_SelectAction_UseItem;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_SelectAction; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="SelectActionActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(SelectActionActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="SelectActionActions" />
        public void AddCallbacks(ISelectActionActions instance)
        {
            if (instance == null || m_Wrapper.m_SelectActionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SelectActionActionsCallbackInterfaces.Add(instance);
            @BaseAttack.started += instance.OnBaseAttack;
            @BaseAttack.performed += instance.OnBaseAttack;
            @BaseAttack.canceled += instance.OnBaseAttack;
            @SkillSelect.started += instance.OnSkillSelect;
            @SkillSelect.performed += instance.OnSkillSelect;
            @SkillSelect.canceled += instance.OnSkillSelect;
            @UseItem.started += instance.OnUseItem;
            @UseItem.performed += instance.OnUseItem;
            @UseItem.canceled += instance.OnUseItem;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="SelectActionActions" />
        private void UnregisterCallbacks(ISelectActionActions instance)
        {
            @BaseAttack.started -= instance.OnBaseAttack;
            @BaseAttack.performed -= instance.OnBaseAttack;
            @BaseAttack.canceled -= instance.OnBaseAttack;
            @SkillSelect.started -= instance.OnSkillSelect;
            @SkillSelect.performed -= instance.OnSkillSelect;
            @SkillSelect.canceled -= instance.OnSkillSelect;
            @UseItem.started -= instance.OnUseItem;
            @UseItem.performed -= instance.OnUseItem;
            @UseItem.canceled -= instance.OnUseItem;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="SelectActionActions.UnregisterCallbacks(ISelectActionActions)" />.
        /// </summary>
        /// <seealso cref="SelectActionActions.UnregisterCallbacks(ISelectActionActions)" />
        public void RemoveCallbacks(ISelectActionActions instance)
        {
            if (m_Wrapper.m_SelectActionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="SelectActionActions.AddCallbacks(ISelectActionActions)" />
        /// <seealso cref="SelectActionActions.RemoveCallbacks(ISelectActionActions)" />
        /// <seealso cref="SelectActionActions.UnregisterCallbacks(ISelectActionActions)" />
        public void SetCallbacks(ISelectActionActions instance)
        {
            foreach (var item in m_Wrapper.m_SelectActionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SelectActionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="SelectActionActions" /> instance referencing this action map.
    /// </summary>
    public SelectActionActions @SelectAction => new SelectActionActions(this);

    // QTE
    private readonly InputActionMap m_QTE;
    private List<IQTEActions> m_QTEActionsCallbackInterfaces = new List<IQTEActions>();
    private readonly InputAction m_QTE_ButtonA;
    /// <summary>
    /// Provides access to input actions defined in input action map "QTE".
    /// </summary>
    public struct QTEActions
    {
        private @UserInputAction m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public QTEActions(@UserInputAction wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "QTE/ButtonA".
        /// </summary>
        public InputAction @ButtonA => m_Wrapper.m_QTE_ButtonA;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_QTE; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="QTEActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(QTEActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="QTEActions" />
        public void AddCallbacks(IQTEActions instance)
        {
            if (instance == null || m_Wrapper.m_QTEActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_QTEActionsCallbackInterfaces.Add(instance);
            @ButtonA.started += instance.OnButtonA;
            @ButtonA.performed += instance.OnButtonA;
            @ButtonA.canceled += instance.OnButtonA;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="QTEActions" />
        private void UnregisterCallbacks(IQTEActions instance)
        {
            @ButtonA.started -= instance.OnButtonA;
            @ButtonA.performed -= instance.OnButtonA;
            @ButtonA.canceled -= instance.OnButtonA;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="QTEActions.UnregisterCallbacks(IQTEActions)" />.
        /// </summary>
        /// <seealso cref="QTEActions.UnregisterCallbacks(IQTEActions)" />
        public void RemoveCallbacks(IQTEActions instance)
        {
            if (m_Wrapper.m_QTEActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="QTEActions.AddCallbacks(IQTEActions)" />
        /// <seealso cref="QTEActions.RemoveCallbacks(IQTEActions)" />
        /// <seealso cref="QTEActions.UnregisterCallbacks(IQTEActions)" />
        public void SetCallbacks(IQTEActions instance)
        {
            foreach (var item in m_Wrapper.m_QTEActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_QTEActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="QTEActions" /> instance referencing this action map.
    /// </summary>
    public QTEActions @QTE => new QTEActions(this);
    private int m_PCSchemeIndex = -1;
    /// <summary>
    /// Provides access to the input control scheme.
    /// </summary>
    /// <seealso cref="UnityEngine.InputSystem.InputControlScheme" />
    public InputControlScheme PCScheme
    {
        get
        {
            if (m_PCSchemeIndex == -1) m_PCSchemeIndex = asset.FindControlSchemeIndex("PC");
            return asset.controlSchemes[m_PCSchemeIndex];
        }
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "SelectUnit" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="SelectUnitActions.AddCallbacks(ISelectUnitActions)" />
    /// <seealso cref="SelectUnitActions.RemoveCallbacks(ISelectUnitActions)" />
    public interface ISelectUnitActions
    {
        /// <summary>
        /// Method invoked when associated input action "EnemySelectionMove" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnEnemySelectionMove(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "PlayerSelectionMove" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPlayerSelectionMove(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Touch" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnTouch(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "SelectionConfirm" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSelectionConfirm(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "SelectAction" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="SelectActionActions.AddCallbacks(ISelectActionActions)" />
    /// <seealso cref="SelectActionActions.RemoveCallbacks(ISelectActionActions)" />
    public interface ISelectActionActions
    {
        /// <summary>
        /// Method invoked when associated input action "BaseAttack" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnBaseAttack(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "SkillSelect" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSkillSelect(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "UseItem" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnUseItem(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "QTE" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="QTEActions.AddCallbacks(IQTEActions)" />
    /// <seealso cref="QTEActions.RemoveCallbacks(IQTEActions)" />
    public interface IQTEActions
    {
        /// <summary>
        /// Method invoked when associated input action "ButtonA" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnButtonA(InputAction.CallbackContext context);
    }
}
